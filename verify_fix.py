#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de verifica√ß√£o para confirmar se a corre√ß√£o de renomea√ß√£o de subdiret√≥rios est√° ativa.
"""

import os
import inspect
from file_renamer import FileRenamer

def verify_fix_implementation():
    """Verifica se a corre√ß√£o est√° implementada corretamente"""
    
    print("=== VERIFICA√á√ÉO DA CORRE√á√ÉO DE SUBDIRET√ìRIOS ===\\n")
    
    # 1. Verifica se a fun√ß√£o update_internal_structure existe
    print("1. Verificando fun√ß√£o update_internal_structure...")
    if hasattr(FileRenamer, 'update_internal_structure'):
        print("   ‚úÖ Fun√ß√£o update_internal_structure encontrada")
        
        # Mostra a assinatura da fun√ß√£o
        sig = inspect.signature(FileRenamer.update_internal_structure)
        print(f"   üìã Assinatura: {sig}")
    else:
        print("   ‚ùå Fun√ß√£o update_internal_structure N√ÉO encontrada")
        print("   üîß A√á√ÉO NECESS√ÅRIA: C√≥digo n√£o foi atualizado corretamente")
        return False
    
    # 2. Verifica se a fun√ß√£o rename_directory tem a l√≥gica de mesmo nome
    print("\\n2. Verificando l√≥gica de mesmo nome em rename_directory...")
    source = inspect.getsource(FileRenamer.rename_directory)
    
    if "Mesmo nome de diret√≥rio" in source:
        print("   ‚úÖ L√≥gica de mesmo nome encontrada")
    else:
        print("   ‚ùå L√≥gica de mesmo nome N√ÉO encontrada")
        print("   üîß A√á√ÉO NECESS√ÅRIA: rename_directory n√£o foi atualizada")
        return False
    
    if "update_internal_structure" in source:
        print("   ‚úÖ Chamada para update_internal_structure encontrada")
    else:
        print("   ‚ùå Chamada para update_internal_structure N√ÉO encontrada")
        return False
    
    # 3. Verifica se a fun√ß√£o rename_directories_recursively existe
    print("\\n3. Verificando fun√ß√£o rename_directories_recursively...")
    if hasattr(FileRenamer, 'rename_directories_recursively'):
        print("   ‚úÖ Fun√ß√£o rename_directories_recursively encontrada")
    else:
        print("   ‚ùå Fun√ß√£o rename_directories_recursively N√ÉO encontrada")
        return False
    
    # 4. Testa um caso simples
    print("\\n4. Testando funcionalidade b√°sica...")
    try:
        import tempfile
        with tempfile.TemporaryDirectory() as temp_dir:
            # Cria estrutura de teste
            test_dir = os.path.join(temp_dir, "L08685")
            subdir = os.path.join(test_dir, "0000125")
            os.makedirs(subdir)
            
            # Testa o FileRenamer
            renamer = FileRenamer(temp_dir)
            result = renamer.rename_directory("L08685", "L08685")
            
            # Verifica resultado
            expected_subdir = os.path.join(test_dir, "0008685")
            if os.path.exists(expected_subdir):
                print("   ‚úÖ Teste funcional passou - subdiret√≥rio foi renomeado")
            else:
                print("   ‚ùå Teste funcional falhou - subdiret√≥rio n√£o foi renomeado")
                return False
            
    except Exception as e:
        print(f"   ‚ùå Erro no teste funcional: {e}")
        return False
    
    print("\\n=== RESULTADO FINAL ===")
    print("‚úÖ CORRE√á√ÉO EST√Å IMPLEMENTADA E FUNCIONANDO!")
    print("\\nüìã INSTRU√á√ïES PARA USAR:")
    print("1. Feche completamente a aplica√ß√£o OperaLote se estiver aberta")
    print("2. Reinicie a aplica√ß√£o")
    print("3. Execute uma renomea√ß√£o normalmente")
    print("4. Agora o subdiret√≥rio ser√° renomeado automaticamente")
    print("\\nüîç COMO VERIFICAR SE FUNCIONOU:")
    print("Veja se o log mostra:")
    print("  ANTES: D:/.../L08685/0000125/AITs/arquivo.txt")
    print("  DEPOIS: D:/.../L08685/0008685/AITs/arquivo.txt")
    
    return True

def show_current_version_info():
    """Mostra informa√ß√µes da vers√£o atual"""
    print("\\n=== INFORMA√á√ïES DA VERS√ÉO ATUAL ===")
    
    file_path = os.path.abspath(FileRenamer.__module__.replace('.', os.sep) + '.py')
    if os.path.exists(file_path):
        stat = os.stat(file_path)
        import time
        mod_time = time.ctime(stat.st_mtime)
        print(f"üìÅ Arquivo: {file_path}")
        print(f"üïí √öltima modifica√ß√£o: {mod_time}")
        print(f"üìè Tamanho: {stat.st_size} bytes")
    
    # Mostra quantas fun√ß√µes existem na classe
    methods = [method for method in dir(FileRenamer) if not method.startswith('_')]
    print(f"üîß M√©todos dispon√≠veis: {len(methods)}")
    print(f"üìù Lista: {', '.join(methods)}")

if __name__ == "__main__":
    print("VERIFICA√á√ÉO DE CORRE√á√ÉO - OperaLote 4.0")
    print("=" * 50)
    
    try:
        success = verify_fix_implementation()
        show_current_version_info()
        
        if success:
            print("\\nüéâ TUDO PRONTO! A corre√ß√£o est√° ativa.")
        else:
            print("\\n‚ö†Ô∏è PROBLEMA DETECTADO! Corre√ß√£o n√£o est√° ativa.")
            print("\\nüîß SOLU√á√ÉO:")
            print("1. Verifique se voc√™ salvou o arquivo file_renamer.py")
            print("2. Reinicie a aplica√ß√£o completamente")
            print("3. Execute este script novamente")
            
    except Exception as e:
        print(f"\\n‚ùå ERRO DURANTE VERIFICA√á√ÉO: {e}")
        print("\\nüîß POSS√çVEIS CAUSAS:")
        print("1. Arquivo file_renamer.py n√£o encontrado")
        print("2. Erro de sintaxe no c√≥digo")
        print("3. Problema de importa√ß√£o")