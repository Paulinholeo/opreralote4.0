#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para debugar o problema de busca no diret√≥rio errado
"""

import os
import tempfile
import shutil
from infraction_analyzer import InfractionAnalyzer
from file_renamer import FileRenamer

def test_directory_search_issue():
    """
    Testa o problema de busca no diret√≥rio errado
    """
    print("=== Teste de Problema de Diret√≥rio ===\n")
    
    # Cria diret√≥rio tempor√°rio
    test_dir = tempfile.mkdtemp(prefix="debug_directory_")
    
    try:
        # Simula estrutura real com problema de diret√≥rio
        # Estrutura correta: L08685/0008685/AITs/arquivo.txt
        # Estrutura errada: L08685/0000125/AITs/arquivo.txt (n√£o renomeado)
        lote_dir = os.path.join(test_dir, "L08685")
        subdir_wrong = os.path.join(lote_dir, "0000125")  # Diret√≥rio errado
        aits_dir = os.path.join(subdir_wrong, "AITs")
        os.makedirs(aits_dir, exist_ok=True)
        
        # Cria arquivos com infra√ß√µes no diret√≥rio errado
        test_files = {
            os.path.join(aits_dir, "teste_infraction.txt"): "0000125;data;5673\n0000125;data2;6050\n0000125;data3;7587",
        }
        
        for file_path, content in test_files.items():
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, "w", encoding='utf-8') as f:
                f.write(content)
        
        print(f"Estrutura de teste criada em: {test_dir}")
        print("Arquivos ANTES da corre√ß√£o:")
        print_structure(test_dir)
        
        # Testa o InfractionAnalyzer
        analyzer = InfractionAnalyzer(test_dir)
        
        print(f"\n{'='*50}")
        print(f"EXECUTANDO AN√ÅLISE DE INFRA√á√ïES")
        print(f"{'='*50}")
        
        # Aqui est√° o problema - o analyzer est√° procurando no diret√≥rio errado
        infraction_counts = analyzer.analyze_infractions("L08685")
        
        print(f"\nContadores de infra√ß√µes encontrados:")
        if infraction_counts:
            for code, count in infraction_counts.items():
                description = analyzer.get_infraction_description(code)
                print(f"  {code}: {count} ocorr√™ncias ({description})")
        else:
            print("  Nenhuma infra√ß√£o encontrada!")
            print("  PROVAVELMENTE porque est√° procurando no diret√≥rio errado")
        
        # Agora vamos testar a corre√ß√£o do diret√≥rio
        print(f"\n{'='*50}")
        print(f"TESTANDO CORRE√á√ÉO DO DIRET√ìRIO")
        print(f"{'='*50}")
        
        # Simula a corre√ß√£o do diret√≥rio (o que deveria acontecer no rename_directory)
        correct_subdir = os.path.join(lote_dir, "0008685")
        if os.path.exists(subdir_wrong) and not os.path.exists(correct_subdir):
            print(f"Corrigindo diret√≥rio: {subdir_wrong} -> {correct_subdir}")
            os.rename(subdir_wrong, correct_subdir)
            
            # Tamb√©m corrige o AITs
            wrong_aits = os.path.join(correct_subdir, "AITs")
            if os.path.exists(wrong_aits):
                print(f"Diret√≥rio AITs j√° est√° no lugar certo")
        
        print("\nEstrutura AP√ìS corre√ß√£o:")
        print_structure(test_dir)
        
        # Testa novamente ap√≥s corre√ß√£o
        print(f"\n{'='*50}")
        print(f"AN√ÅLISE AP√ìS CORRE√á√ÉO")
        print(f"{'='*50}")
        
        infraction_counts_after = analyzer.analyze_infractions("L08685")
        
        print(f"Contadores de infra√ß√µes ap√≥s corre√ß√£o:")
        if infraction_counts_after:
            for code, count in infraction_counts_after.items():
                description = analyzer.get_infraction_description(code)
                print(f"  {code}: {count} ocorr√™ncias ({description})")
        else:
            print("  Ainda nenhuma infra√ß√£o encontrada!")
            
    except Exception as e:
        print(f"Erro: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        shutil.rmtree(test_dir)
        print(f"\nDiret√≥rio removido: {test_dir}")

def print_structure(directory, indent=""):
    """
    Imprime estrutura detalhada com tamanhos
    """
    if not os.path.exists(directory):
        return
        
    items = sorted(os.listdir(directory))
    for item in items:
        item_path = os.path.join(directory, item)
        if os.path.isfile(item_path):
            size = os.path.getsize(item_path)
            print(f"{indent}üìÑ {item} ({size} bytes)")
        else:
            print(f"{indent}üìÅ {item}/")
            print_structure(item_path, indent + "  ")

if __name__ == "__main__":
    test_directory_search_issue()